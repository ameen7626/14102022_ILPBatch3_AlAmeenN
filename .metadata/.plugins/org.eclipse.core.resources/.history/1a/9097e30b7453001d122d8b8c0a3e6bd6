package com.bank.service;

import java.util.ArrayList;
import java.util.Scanner;

import com.bank.entity.Account;
import com.bank.entity.Customer;
import com.bank.entity.Product;
import com.bank.entity.Service;

public class AccountService {
	Scanner scanner = new Scanner(System.in);
	Service bankService = new Service(null);
	ArrayList<Service> bankServicesList = new ArrayList<Service>();

	public ArrayList<Customer> createAccount(ArrayList<Customer> customers, ArrayList<Service> allServiceList) // to
																												// create
																												// account
	{
		System.out.println("Enter Customer Id");
		String customerIdEnter = scanner.nextLine();
		Customer findCustomerId = checkCustomer(customerIdEnter, customers);
		if (findCustomerId == null) {
			System.out.println("Customer Id not available!! Create new Account");
			customers = createNewCustomerAccount(customers, allServiceList);
		} else {
			System.out.println("Customer available!! Creating Account using existing details");
			customers = createExistingCustomerAccount(findCustomerId, customers);
		}
		return customers;
	}

	private ArrayList<Customer> createNewCustomerAccount(ArrayList<Customer> customers,
			ArrayList<Service> allServiceList) {
		System.out.println(
				"****Accounts Available***********\n 1.Savings Account \n 2.Current Account \n 3. Loan Account ");
		System.out.println("Enter your choice");
		int choice = scanner.nextInt();
		scanner.nextLine();
		System.out.println("Enter the customer code");
		String customerId = scanner.nextLine();
		System.out.println("Enter the customer name");
		String customerName = scanner.nextLine();

		switch (choice) {
		case 1:
			ArrayList<Account> accountlist = new ArrayList<Account>();
			accountlist.add(BankService.createSavingsMaxAccount(allServiceList));
			Customer customer = new Customer(customerName, customerId, accountlist);
			System.out.println("Savings Max Account created for " + customerName);
			customers.add(customer);
			break;
		case 2:
			ArrayList<Account> accountlist2 = new ArrayList<Account>();
			accountlist2.add(BankService.createCurrentAccount(allServiceList));
			Customer customer2 = new Customer(customerName, customerId, accountlist2);
			System.out.println("Current Account created for " + customerName);
			customers.add(customer2);
			break;
		case 3:
			ArrayList<Account> accountlist3 = new ArrayList<Account>();
			accountlist3.add(BankService.createLoanAccount(allServiceList));
			Customer customer3 = new Customer(customerName, customerId, accountlist3);
			System.out.println("Loan Account created for " + customerName);
			customers.add(customer3);
			break;
		default:
			System.out.println("Inavalid Choice");

		}
		return customers;
	}

	private Customer checkCustomer(String customerIdEnter, ArrayList<Customer> customers) {
		Customer findCustomerId = null;
		for (Customer customer : customers) {
			if (customerIdEnter.compareTo(customer.getCustomerId()) == 0) {
				findCustomerId = customer;
				break;
			}
		}
		return findCustomerId;
	}

	private ArrayList<Customer> createExistingCustomerAccount(Customer findCustomerId, ArrayList<Customer> customers) {
		System.out.println("Products Available");
		System.out.println("1.Savings Max Account\n2.Current Account\n3.Loan Account");
		System.out.println("Enter your choice");
		int accountChoice = scanner.nextInt();
		return null;
//		switch(accountChoice) {
//				
//			}
	}

//private Customer checkAccount(int accountChoice, ArrayList<Customer> customers) {
//	Account findAccount = null;
//	for(Account account : findCustomerId.getAccountList()) {
//		if (customerIdEnter.compareTo(customer.getCustomerId()) == 0) {
//			findCustomerId = customer;
//			break;
//		}
//	}
//	return findCustomerId;
//	
//	return null;
//}
//
//
//}
//
}
